// Load compatibility script
load("nashorn:mozilla_compat.js");


importPackage(org.json);
importPackage(java.io);
importPackage(java.util);
importPackage(java.text);
importPackage(java.lang);

importPackage(com.tririga.ws.dto);
importPackage(com.deloitte.tririga.custom.message);


var log = org.apache.log4j.Logger.getLogger("v-repair-workorder-remark-add-js");

/*var inputStream = request.getInputStream();


var byteArr = Array(request.getContentLength());

var xmlData = Java.to(byteArr, "byte[]");

//Start reading XML Request as a Stream of Bytes
var bis = new BufferedInputStream(inputStream);

bis.read(xmlData, 0, xmlData.length);

var xmlString = "";

if (request.getCharacterEncoding() != null) {
	xmlString = new java.lang.String(xmlData, request.getCharacterEncoding());
} else {
	xmlString = new java.lang.String(xmlData);
}

log.debug(xmlString);

var root = JSON.parse(XML.toJSONObject(xmlString).toString());

log.debug(JSON.stringify(root));

var STATUS_CODE_MAP = {
	"CANCEL" : "CANCELLATION"
};*/

var VREPAIR_DATE_FORMAT = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
//var YARDI_DATE_FORMAT = new SimpleDateFormat("MM/dd/yyyy");

//var workTaskDTORecord = new RecordData();


/*var attributeSet = new HashSet();

attributeSet.addAll(["cstVRepairIdTX", "triRecordIdSY", "cstWorkTaskIdTX"]);

var attributeMap = new HashMap();

attributeMap.put("RecordInformation", attributeSet);

workTaskRecord.setRecordID(java.lang.Long.parseLong(workOrderId));
workTaskRecord.setObjectType("triWorkTask");
workTaskRecord.setAttributes(attributeMap);
workTaskRecord.setModule("triTask");

workTaskRecord.fillRecordData(tririgaWS, null);*/

var recordDataMap = recordData.getRecordData();


var workTaskMap = {
	"vRepairId": recordDataMap.get("cstVRepairIdTX"),
	"workTaskId": recordDataMap.get("triRecordIdSY")
}

//var YARDI_DATE_FORMAT = new SimpleDateFormat("MM/dd/yyyy");

var transformMap = {
	"commentDateTime": (function (r) {
		var dateField = r["Reference Date"] + "";
		if (dateField.isEmpty()) return "";
		return VREPAIR_DATE_FORMAT.format(new java.util.Date(Long.parseLong(dateField)));
	})
	//"commentText": (function (r) { return r["Comment"]; }),
	//"commentType": (function (r) { return r["Comment Type"]; }),
	//"createdBy": (function (r) { return r["Created By"]; })
};

log.info("workTaskId,vRepairId :" + workTaskMap.workTaskId + "-" + workTaskMap.vRepairId);
log.info("workTaskId,vRepairId :" + recordDataMap.get("triRecordIdSY") + "-" + recordDataMap.get("cstVRepairIdTX"));


var records = [];

var filter = new com.tririga.ws.dto.Filter();

filter.setFieldName("$$RECORDID$$");
filter.setValue(recordDataMap.get("cstWorkTaskIdTX"));
var filterArray = [filter];

var commentQueryResult = tririgaWS.runNamedQuery("", "triCommon", "triComment", "triComment - Associated to Current Record", filterArray, 1, 1);

//var eventQueryResult = tririgaWS.runNamedQuery("", "triCommon", "cstEventLog", "cstEventLog - Display - All Event Logs for WorkTask",
//null, 1, 1);

var commentQueryResponse = commentQueryResult.getQueryResponseHelpers();

for (var i = 0; i < commentQueryResponse.length; ++i) {
	records.push(getRecord(commentQueryResponse[i]))
};

function getRecord(row) {

	var record = {};

	var eachRow = row.getQueryResponseColumns();

	for (var i = 0; i < eachRow.length; ++i) {

		var rowVal = eachRow[i].getValue();

		rowVal = rowVal != null ? rowVal + "" : "";

		record[eachRow[i].getLabel()] = rowVal.replaceAll("(\r\n|\n\r|\r|\n)", " ");
	}
	log.debug(record);

	return record;
}


//log.info("commentDateTime,commentType :" + records[0]["Reference Date"] + "-" + records[0]["Comment Type"]);

var FMUtil = Java.type("com.deloitte.tririga.common.FMUtil")

var requestXML = FMUtil.getResourceAsText("v-repair-workorder-outbound-req-template.xml");

var r = records[0];
requestXML = java.lang.String.format(requestXML, workTaskMap.vRepairId, workTaskMap.workTaskId,
	transformMap["commentDateTime"](r), r["Comment"], r["Comment Type"], r["Created By"]);


//response.setHeader("Content-Type", "text/xml");
//response.getWriter().print(requestXML);
log.info(requestXML);



/*attributeSet.add("cstEventLogTypeTX");
attributeSet.add("cstStatusCodeTX");
attributeSet.add("cstActivityDateTimeTX");
attributeSet.add("cstRequesterTX");
attributeSet.add("cstStatusTX");


var attributeMap = new HashMap();

attributeMap.put("General", attributeSet);

workTaskRecord.setRecordID(java.lang.Long.parseLong(tranformMap.General.workTaskId));
workTaskRecord.setObjectType("cstWorkTaskDTO");
workTaskRecord.setAttributes(attributeMap);
workTaskRecord.setModule("cstIntegration");

log.info("About to pull data:" + workTaskDTORecord.getRecordID());

workTaskRecord.fillRecordData(tririgaWS, null);

workTaskRecord.getRecordData().put("cstEventLogTypeTX", tranformMap.General.statusCode);
workTaskRecord.getRecordData().put("cstStatusCodeTX", tranformMap.General.statusComment);
workTaskRecord.getRecordData().put("cstActivityDateTimeTX", tranformMap.General.activityDate);
workTaskRecord.getRecordData().put("cstRequesterTX", tranformMap.General.createdBy);
workTaskRecord.getRecordData().put("cstStatusTX", tranformMap.General.status);

log.info(attributeMap);

workTaskRecord.saveRecordData(tririgaWS, "cstSave");

log.info(attributeMap);

var FMUtil = Java.type("com.deloitte.tririga.common.FMUtil")

var responseXML = FMUtil.getResourceAsText("v-repair-workorder-inbound-resp-template.xml");


responseXML = java.lang.String.format(responseXML, tranformMap.General.vRepairId, tranformMap.General.workTaskId);

response.setHeader("Content-Type", "text/xml");
response.getWriter().print(responseXML);*/